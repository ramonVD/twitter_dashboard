datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  last_login    DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  seen_tweets   Seen_Tweet[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])

}

model Author {
  id Int @id @default(autoincrement())
  name String
  username String
  location String
  profileImageUrl String @map("profile_image_url")
  url String? @default("")
  description String? @default("")
  verified Boolean? @default(false)
  protected Boolean? @default(false)
  createdAt DateTime @map("created_at")
  seen_tweets   Seen_Tweet[]
}

model Tweet {
    id Int @id @default(autoincrement())
    author_id String 
    conversation_id String
    text String @db.VarChar(300)
    source String? @default("")
    lang String
    reply_settings String? @default("")
    retweets Int @default(0)
    likes Int @default(0)
    replies Int @default(0)
    quotes Int @default(0)
    possibly_sensitive Boolean @default(false)
    entities Json @default("{}")
    is_retweet Boolean @default(false)
    seen_tweets   Seen_Tweet[]
}

model Seen_Tweet {
    refId Int @id @default(autoincrement())
    userId String
    authorId Int
    tweetId Int
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    author Author @relation(fields: [authorId], references: [id], onDelete: Cascade)
    tweet Tweet @relation(fields: [tweetId], references: [id])
}